#!/usr/bin/env ruby
require 'open-uri'
require 'pathname'
require 'timeout'
require 'socket'

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../',  __FILE__)

def get_ip container, port
  ip = /(?:\d{1,3}\.){3}\d{1,3}/.match(ENV['DOCKER_HOST'])
  ip ||= 'localhost'

  port = `docker port #{container} #{port} 2>/dev/null`.strip.split(':')[1]

  return ip.to_s, port
end

def start_db env
  print "Waiting for pokesite-#{env}-db"
  `docker start pokesite-#{env}-db`

  ip, port = get_ip("pokesite-#{env}-db", 7474)
  addr = "http://#{ip}:#{port}"

  tries = 0
  until tries == 30
    print "."
    begin
      Timeout::timeout(1) do
        begin
          open(addr)
          print ".." unless tries > 0
          print "available at #{addr}\n"
          return
        rescue
          system "sleep 1"
          tries += 1
        end
      end
    rescue Timeout::Error
      tries += 1
    end
  end

  print "failed to become available\n"
  raise
end

def stop_db env
  `docker stop pokesite-#{env}-db`
end

def start env
  ip, port = get_ip("pokesite-#{env}", 3000)
  return false if ip and port

  start_db env
  `docker start pokesite-#{env}`
end

def stop env
  ip, port = get_ip("pokesite-#{env}", 3000)
  return false unless ip and port

  `docker stop pokesite-#{env}`
  stop_db env
end

def exec env, cmd, args = []
  start env
  system "docker exec -i -t pokesite-#{env} #{cmd} #{args.join " "}"
end

def run env, cmd, args = []
  start_db env
  system "docker run -i -t --link pokesite-#{env}-db:db --volumes-from pokesite-dev --rm pokesite #{cmd} #{args.join " "}"
end

Dir.chdir APP_ROOT do
  cmd = ARGV.shift
  cmd ||= "help"

  case cmd
  when "start"
    start "dev"

    ip, port = get_ip("pokesite-dev", 3000)
    puts "Server available at http://#{ip}:#{port}"

    system "docker attach pokesite-dev"
  when "stop"
    stop "dev"
    stop_db "test"
  when "spec"
    run "test", "bin/rspec", ARGV
  when "commit"
    system "docker commit pokesite-dev pokesite"
  when "help"
    puts "Usage: bin/d {start|stop|spec [ARGUMENTS]|help|COMMAND [ARGUMENTS]}"
  else
    exec "dev", cmd, ARGV
  end
end
